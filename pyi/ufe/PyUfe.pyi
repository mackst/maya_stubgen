from typing import Any, ClassVar, Iterator, List

from typing import overload

class AreaInterface:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def normalize(self, arg0: bool) -> None: ...
    @overload
    def normalize(self) -> bool: ...
    def normalizeCmd(self, *args, **kwargs) -> Any: ...

class Attribute:
    kBool: ClassVar[str] = ...
    kColorFloat3: ClassVar[str] = ...
    kColorFloat4: ClassVar[str] = ...
    kDouble: ClassVar[str] = ...
    kDouble3: ClassVar[str] = ...
    kEnumString: ClassVar[str] = ...
    kFilename: ClassVar[str] = ...
    kFloat: ClassVar[str] = ...
    kFloat2: ClassVar[str] = ...
    kFloat3: ClassVar[str] = ...
    kFloat4: ClassVar[str] = ...
    kGeneric: ClassVar[str] = ...
    kInt: ClassVar[str] = ...
    kInt3: ClassVar[str] = ...
    kInvalid: ClassVar[str] = ...
    kLocked: ClassVar[str] = ...
    kMatrix3d: ClassVar[str] = ...
    kMatrix4d: ClassVar[str] = ...
    kString: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, arg0: SceneItem) -> None: ...
    def clearMetadata(self, arg0: str) -> bool: ...
    def getDocumentation(self) -> str: ...
    def getMetadata(self, arg0: str) -> Value: ...
    def hasMetadata(self, arg0: str) -> bool: ...
    def hasValue(self) -> bool: ...
    def sceneItem(self) -> SceneItem: ...
    def setMetadata(self, arg0: str, arg1: Value) -> bool: ...
    def setMetadataCmd(self, *args, **kwargs) -> Any: ...
    def __eq__(self, arg0: Attribute) -> bool: ...
    def __ne__(self, arg0: Attribute) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...

class AttributeAdded(AttributeChanged):
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class AttributeBool(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> bool: ...
    def set(self, arg0: bool) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeChanged(Notification):
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class AttributeColorFloat3(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Color3f: ...
    def set(self, arg0: Color3f) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeColorFloat4(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Color4f: ...
    def set(self, arg0: Color4f) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeCommand(UndoableCommand):
    def __init__(self) -> None: ...
    @property
    def attribute(self) -> Attribute: ...

class AttributeConnectionChanged(AttributeChanged):
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class AttributeDef:
    class IOType:
        __members__: ClassVar[dict] = ...  # read-only
        INPUT_ATTR: ClassVar[AttributeDef.IOType] = ...
        OUTPUT_ATTR: ClassVar[AttributeDef.IOType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    INPUT_ATTR: ClassVar[AttributeDef.IOType] = ...
    OUTPUT_ATTR: ClassVar[AttributeDef.IOType] = ...
    def __init__(self) -> None: ...
    def defaultValue(self) -> str: ...
    def getMetadata(self, arg0: str) -> Value: ...
    def hasMetadata(self, arg0: str) -> bool: ...
    def ioType(self, *args, **kwargs) -> Any: ...
    def name(self) -> str: ...
    def type(self) -> str: ...

class AttributeDouble(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> float: ...
    def set(self, arg0: float) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeDouble3(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Vector3d: ...
    def set(self, arg0: Vector3d) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeEnumString(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> str: ...
    def getEnumValues(self) -> List[str]: ...
    def set(self, arg0: str) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeFilename(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> str: ...
    def set(self, arg0: str) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeFloat(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> float: ...
    def set(self, arg0: float) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeFloat2(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Vector2f: ...
    def set(self, arg0: Vector2f) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeFloat3(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Vector3f: ...
    def set(self, arg0: Vector3f) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeFloat4(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Vector4f: ...
    def set(self, arg0: Vector4f) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeGeneric(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def nativeType(self) -> str: ...

class AttributeInfo:
    @overload
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: Attribute) -> None: ...
    def attribute(self) -> Attribute: ...
    @property
    def name(self) -> str: ...
    @property
    def path(self) -> Path: ...
    @property
    def runTimeId(self) -> int: ...

class AttributeInt(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> int: ...
    def set(self, arg0: int) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeInt3(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Vector3i: ...
    def set(self, arg0: Vector3i) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeMatrix3d(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Matrix3d: ...
    def set(self, arg0: Matrix3d) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeMatrix4d(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> Matrix4d: ...
    def set(self, arg0: Matrix4d) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeMetadataChanged(AttributeChanged):
    def __init__(self, arg0: Path, arg1: str, arg2: Set[str]) -> None: ...
    def keys(self) -> Set[str]: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class AttributeRemoved(AttributeChanged):
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class AttributeString(Attribute):
    def __init__(self, arg0: SceneItem) -> None: ...
    def get(self) -> str: ...
    def set(self, arg0: str) -> None: ...
    def setCmd(self, *args, **kwargs) -> Any: ...

class AttributeValueChanged(AttributeChanged):
    def __init__(self, arg0: Path, arg1: str) -> None: ...
    def name(self) -> str: ...
    def path(self) -> Path: ...

class Attributes:
    attribute: ClassVar[function] = ...
    def __init__(self) -> None: ...
    def addAttribute(self, arg0: str, arg1: str) -> Attribute: ...
    def addAttributeCmd(self, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def addObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def addObserver(cls, arg0: Observer) -> bool: ...
    def attributeType(self, arg0: str) -> str: ...
    @classmethod
    def attributes(cls, arg0: SceneItem) -> Attributes: ...
    def getRawAddress(self) -> int: ...
    def hasAttribute(self, arg0: str) -> bool: ...
    @overload
    @classmethod
    def hasObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def hasObserver(cls, arg0: Observer) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: Path) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: int) -> bool: ...
    @overload
    @classmethod
    def nbObservers(cls, arg0: SceneItem) -> int: ...
    @overload
    @classmethod
    def nbObservers(cls) -> int: ...
    @classmethod
    def notify(cls, arg0) -> None: ...
    def removeAttribute(self, arg0: str) -> bool: ...
    def removeAttributeCmd(self, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0: Observer) -> bool: ...
    def renameAttribute(self, arg0: str, arg1: str) -> Attribute: ...
    def renameAttributeCmd(self, *args, **kwargs) -> Any: ...
    def sceneItem(self) -> SceneItem: ...
    @property
    def attributeNames(self) -> List[str]: ...

class AttributesHandler:
    def __init__(self) -> None: ...
    def attributes(self, arg0: SceneItem) -> Attributes: ...

class BBox3d:
    max: Any
    min: Any
    def __init__(self) -> None: ...
    def empty(self) -> bool: ...

class BatchOpsHandler:
    def __init__(self) -> None: ...
    @classmethod
    def duplicateSelectionCmd(cls, *args, **kwargs) -> Any: ...
    def duplicateSelectionCmd_(self, *args, **kwargs) -> Any: ...

class Camera:
    class Projection:
        __members__: ClassVar[dict] = ...  # read-only
        Orthographic: ClassVar[Camera.Projection] = ...
        Perspective: ClassVar[Camera.Projection] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    Orthographic: ClassVar[Camera.Projection] = ...
    Perspective: ClassVar[Camera.Projection] = ...
    def __init__(self) -> None: ...
    @classmethod
    def addObserver(cls, arg0, arg1) -> bool: ...
    @classmethod
    def camera(cls, arg0) -> Camera: ...
    @overload
    def fStop(self, arg0: float) -> None: ...
    @overload
    def fStop(self) -> float: ...
    def fStopCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def farClipPlane(self, arg0: float) -> None: ...
    @overload
    def farClipPlane(self) -> float: ...
    def farClipPlaneCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def focalLength(self, arg0: float) -> None: ...
    @overload
    def focalLength(self) -> float: ...
    def focalLengthCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def focusDistance(self, arg0: float) -> None: ...
    @overload
    def focusDistance(self) -> float: ...
    def focusDistanceCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def hasObserver(cls, arg0, arg1) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: int) -> bool: ...
    @overload
    def horizontalAperture(self, arg0: float) -> None: ...
    @overload
    def horizontalAperture(self) -> float: ...
    def horizontalApertureCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def horizontalApertureOffset(self, arg0: float) -> None: ...
    @overload
    def horizontalApertureOffset(self) -> float: ...
    def horizontalApertureOffsetCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def nbObservers(cls, arg0) -> int: ...
    @overload
    def nearClipPlane(self, arg0: float) -> None: ...
    @overload
    def nearClipPlane(self) -> float: ...
    def nearClipPlaneCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def notify(cls, arg0) -> None: ...
    def path(self, *args, **kwargs) -> Any: ...
    def projection(self, arg0) -> None: ...
    def projectionCmd(self, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0, arg1) -> bool: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0, arg1) -> bool: ...
    def sceneItem(self, *args, **kwargs) -> Any: ...
    @overload
    def verticalAperture(self, arg0: float) -> None: ...
    @overload
    def verticalAperture(self) -> float: ...
    def verticalApertureCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def verticalApertureOffset(self, arg0: float) -> None: ...
    @overload
    def verticalApertureOffset(self) -> float: ...
    def verticalApertureOffsetCmd(self, *args, **kwargs) -> Any: ...

class CameraChanged(Notification):
    @overload
    def __init__(self, arg0: CameraChanged) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class CameraHandler:
    def __init__(self) -> None: ...
    def camera(self, arg0) -> Camera: ...
    @classmethod
    def find(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def findAll(cls, *args, **kwargs) -> Any: ...
    def find_(self, *args, **kwargs) -> Any: ...

class CellInfo:
    fontBold: bool
    fontItalics: bool
    fontName: str
    fontPointSize: float
    fontStrikeout: bool
    textBgColor: Any
    textFgColor: Any
    def __init__(self) -> None: ...

class ChildFilterFlag:
    label: str
    name: str
    value: bool
    def __init__(self) -> None: ...

class Color3f:
    __hash__: ClassVar[None] = ...
    color: List[float[3]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[3]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def b(self) -> float: ...
    def g(self) -> float: ...
    def r(self) -> float: ...
    def set(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def __eq__(self, arg0: Color3f) -> bool: ...
    def __ne__(self, arg0: Color3f) -> bool: ...

class Color4f:
    __hash__: ClassVar[None] = ...
    color: List[float[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[4]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def a(self) -> float: ...
    def b(self) -> float: ...
    def g(self) -> float: ...
    def r(self) -> float: ...
    def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def __eq__(self, arg0: Color4f) -> bool: ...
    def __ne__(self, arg0: Color4f) -> bool: ...

class CompositeUndoableCommand(UndoableCommand):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[UndoableCommand]) -> None: ...
    def append(self, arg0: UndoableCommand) -> None: ...
    def cmdsList(self) -> List[UndoableCommand]: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class ConeInterface:
    def __init__(self, *args, **kwargs) -> None: ...
    def coneProps(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def conePropsCmd(self, *args, **kwargs) -> Any: ...

class Connection:
    def __init__(self, arg0: AttributeInfo, arg1: AttributeInfo) -> None: ...
    @property
    def dst(self) -> AttributeInfo: ...
    @property
    def src(self) -> AttributeInfo: ...

class ConnectionHandler:
    def __init__(self) -> None: ...
    @overload
    def connect(self, arg0: AttributeInfo, arg1: AttributeInfo) -> Connection: ...
    @overload
    def connect(self, arg0: Attribute, arg1: Attribute) -> Connection: ...
    def createConnectionCmd(self, *args, **kwargs) -> Any: ...
    def deleteConnectionCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def disconnect(self, arg0: AttributeInfo, arg1: AttributeInfo) -> None: ...
    @overload
    def disconnect(self, arg0: Attribute, arg1: Attribute) -> None: ...
    def sourceConnections(self, arg0: SceneItem) -> Connections: ...

class ConnectionResultUndoableCommand(UndoableCommand):
    def __init__(self) -> None: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...
    @property
    def connection(self) -> Connection: ...

class Connections:
    class AttributeType:
        __members__: ClassVar[dict] = ...  # read-only
        ATTR_ANY: ClassVar[Connections.AttributeType] = ...
        ATTR_IS_DESTINATION: ClassVar[Connections.AttributeType] = ...
        ATTR_IS_SOURCE: ClassVar[Connections.AttributeType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    ATTR_ANY: ClassVar[Connections.AttributeType] = ...
    ATTR_IS_DESTINATION: ClassVar[Connections.AttributeType] = ...
    ATTR_IS_SOURCE: ClassVar[Connections.AttributeType] = ...
    def __init__(self) -> None: ...
    def allConnections(self) -> List[Connection]: ...
    def connections(self, arg0: Attribute, arg1) -> List[Connection]: ...
    def hasConnection(self, arg0: Attribute, arg1) -> bool: ...

class ContextItem:
    checkable: bool
    checked: bool
    enabled: bool
    exclusive: bool
    hasChildren: bool
    image: str
    item: str
    label: str
    separator: bool
    def __init__(self) -> None: ...

class ContextOps:
    def __init__(self) -> None: ...
    @classmethod
    def contextOps(cls, arg0) -> ContextOps: ...
    def doOp(self, arg0: List[str]) -> None: ...
    def doOpCmd(self, *args, **kwargs) -> Any: ...
    def getItems(self, arg0: List[str]) -> List[ContextItem]: ...
    def sceneItem(self, *args, **kwargs) -> Any: ...

class ContextOpsHandler:
    def __init__(self) -> None: ...
    def contextOps(self, arg0) -> ContextOps: ...

class DirectionalInterface:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def angle(self, arg0: float) -> None: ...
    @overload
    def angle(self) -> float: ...
    def angleCmd(self, *args, **kwargs) -> Any: ...

class Duplicate:
    item: Any
    undoableCommand: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1) -> None: ...

class EditTransform3dHint:
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        NoHint: ClassVar[EditTransform3dHint.Type] = ...
        Rotate: ClassVar[EditTransform3dHint.Type] = ...
        RotatePivot: ClassVar[EditTransform3dHint.Type] = ...
        Scale: ClassVar[EditTransform3dHint.Type] = ...
        ScalePivot: ClassVar[EditTransform3dHint.Type] = ...
        Translate: ClassVar[EditTransform3dHint.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    NoHint: ClassVar[EditTransform3dHint.Type] = ...
    Rotate: ClassVar[EditTransform3dHint.Type] = ...
    RotatePivot: ClassVar[EditTransform3dHint.Type] = ...
    Scale: ClassVar[EditTransform3dHint.Type] = ...
    ScalePivot: ClassVar[EditTransform3dHint.Type] = ...
    Translate: ClassVar[EditTransform3dHint.Type] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    def type(self, *args, **kwargs) -> Any: ...

class Hierarchy:
    def __init__(self) -> None: ...
    def appendChildCmd(self, arg0: SceneItem) -> InsertChildCommand: ...
    def children(self) -> List[SceneItem]: ...
    def createGroup(self, arg0: PathComponent) -> SceneItem: ...
    def createGroupCmd(self, arg0: PathComponent) -> InsertChildCommand: ...
    @classmethod
    def createItem(cls, arg0: Path) -> SceneItem: ...
    def defaultParent(self) -> SceneItem: ...
    def filteredChildren(self, arg0: List[ChildFilterFlag]) -> List[SceneItem]: ...
    def hasChildren(self) -> bool: ...
    def hasFilteredChildren(self, arg0: List[ChildFilterFlag]) -> bool: ...
    @classmethod
    def hierarchy(cls, arg0: SceneItem) -> Hierarchy: ...
    def insertChild(self, arg0: SceneItem, arg1: SceneItem) -> SceneItem: ...
    def insertChildCmd(self, arg0: SceneItem, arg1: SceneItem) -> InsertChildCommand: ...
    def parent(self) -> SceneItem: ...
    def reorder(self, arg0: List[SceneItem]) -> bool: ...
    def reorderCmd(self, arg0: List[SceneItem]) -> UndoableCommand: ...
    def sceneItem(self) -> SceneItem: ...
    def ungroup(self) -> bool: ...
    def ungroupCmd(self) -> UndoableCommand: ...

class HierarchyHandler:
    def __init__(self) -> None: ...
    def childFilter(self, *args, **kwargs) -> Any: ...
    def createItem(self, arg0: Path) -> SceneItem: ...
    def hierarchy(self, *args, **kwargs) -> Any: ...

class InsertChildCommand(UndoableCommand):
    def __init__(self) -> None: ...
    @property
    def insertedChild(self) -> SceneItem: ...

class Light:
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        Area: ClassVar[Light.Type] = ...
        Directional: ClassVar[Light.Type] = ...
        Invalid: ClassVar[Light.Type] = ...
        Point: ClassVar[Light.Type] = ...
        Spot: ClassVar[Light.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    Area: ClassVar[Light.Type] = ...
    Directional: ClassVar[Light.Type] = ...
    Invalid: ClassVar[Light.Type] = ...
    Point: ClassVar[Light.Type] = ...
    Spot: ClassVar[Light.Type] = ...
    def __init__(self) -> None: ...
    @classmethod
    def addObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    def areaInterface(self, *args, **kwargs) -> Any: ...
    @overload
    def color(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def color(self) -> Color3f: ...
    def colorCmd(self, *args, **kwargs) -> Any: ...
    def coneInterface(self, *args, **kwargs) -> Any: ...
    @overload
    def diffuse(self, arg0: float) -> None: ...
    @overload
    def diffuse(self) -> float: ...
    def diffuseCmd(self, *args, **kwargs) -> Any: ...
    def directionalInterface(self, *args, **kwargs) -> Any: ...
    @classmethod
    def hasObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: Path) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: int) -> bool: ...
    @overload
    def intensity(self, arg0: float) -> None: ...
    @overload
    def intensity(self) -> float: ...
    def intensityCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def light(cls, arg0: SceneItem) -> Light: ...
    @classmethod
    def nbObservers(cls, arg0: SceneItem) -> int: ...
    @classmethod
    def notify(cls, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    @classmethod
    def removeObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    def sceneItem(self) -> SceneItem: ...
    @overload
    def shadowColor(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def shadowColor(self) -> Color3f: ...
    def shadowColorCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def shadowEnable(self, arg0: bool) -> None: ...
    @overload
    def shadowEnable(self) -> bool: ...
    def shadowEnableCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def specular(self, arg0: float) -> None: ...
    @overload
    def specular(self) -> float: ...
    def specularCmd(self, *args, **kwargs) -> Any: ...
    def sphereInterface(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...

class LightChanged(Notification):
    @overload
    def __init__(self, arg0: LightChanged) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class LightHandler:
    def __init__(self) -> None: ...
    def light(self, arg0: SceneItem) -> Light: ...

class Light_ConeProps:
    angle: float
    focus: float
    softness: float
    def __init__(self) -> None: ...

class Light_SphereProps:
    asPoint: bool
    radius: float
    def __init__(self) -> None: ...

class Material:
    def __init__(self) -> None: ...
    def getMaterials(self) -> List[SceneItem]: ...
    @classmethod
    def material(cls, arg0: SceneItem) -> Material: ...

class MaterialHandler:
    def __init__(self) -> None: ...
    def material(self, arg0: SceneItem) -> Material: ...

class Matrix3d:
    __hash__: ClassVar[None] = ...
    matrix: List[List[float[3]][3]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[List[float[3]][3]]) -> None: ...
    def __eq__(self, arg0: Matrix3d) -> bool: ...
    def __mul__(self, arg0: Matrix3d) -> Matrix3d: ...
    def __ne__(self, arg0: Matrix3d) -> bool: ...

class Matrix4d:
    __hash__: ClassVar[None] = ...
    matrix: List[List[float[4]][4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[List[float[4]][4]]) -> None: ...
    def __eq__(self, arg0: Matrix4d) -> bool: ...
    def __mul__(self, arg0: Matrix4d) -> Matrix4d: ...
    def __ne__(self, arg0: Matrix4d) -> bool: ...

class NodeDef:
    def __init__(self) -> None: ...
    def classification(self, arg0: int) -> str: ...
    def createNode(self, arg0: SceneItem, arg1: PathComponent) -> SceneItem: ...
    def createNodeCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def definition(cls, arg0: int, arg1: str) -> NodeDef: ...
    def getMetadata(self, *args, **kwargs) -> Any: ...
    def hasInput(self, arg0: str) -> bool: ...
    def hasMetadata(self, arg0: str) -> bool: ...
    def hasOutput(self, arg0: str) -> bool: ...
    def input(self, *args, **kwargs) -> Any: ...
    def inputNames(self) -> List[str]: ...
    def inputs(self, *args, **kwargs) -> Any: ...
    def nbClassifications(self) -> int: ...
    def output(self, *args, **kwargs) -> Any: ...
    def outputNames(self) -> List[str]: ...
    def outputs(self, *args, **kwargs) -> Any: ...
    def type(self) -> str: ...

class NodeDefHandler:
    def __init__(self) -> None: ...
    @overload
    def definition(self, arg0: SceneItem) -> NodeDef: ...
    @overload
    def definition(self, arg0: str) -> NodeDef: ...
    def definitions(self, arg0: str) -> List[NodeDef]: ...

class Notification:
    @overload
    def __init__(self, arg0: Notification) -> None: ...
    @overload
    def __init__(self) -> None: ...

class NotificationGuard:
    def __init__(self, arg0: Subject) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> bool: ...

class Object3d:
    def __init__(self) -> None: ...
    @classmethod
    def addObserver(cls, arg0: Observer) -> bool: ...
    def boundingBox(self) -> BBox3d: ...
    @classmethod
    def hasObserver(cls, arg0: Observer) -> bool: ...
    @classmethod
    def nbObservers(cls) -> int: ...
    @classmethod
    def notify(cls, arg0: Notification) -> None: ...
    @classmethod
    def object3d(cls, arg0: SceneItem) -> Object3d: ...
    @classmethod
    def removeObserver(cls, arg0: Observer) -> bool: ...
    def sceneItem(self) -> SceneItem: ...
    def setVisibility(self, arg0: bool) -> None: ...
    def setVisibleCmd(self, *args, **kwargs) -> Any: ...
    def visibility(self) -> bool: ...

class Object3dHandler:
    def __init__(self) -> None: ...
    def object3d(self, arg0: SceneItem) -> Object3d: ...

class ObjectAdd(SceneChanged):
    def __init__(self, arg0: SceneItem) -> None: ...
    def changedPath(self) -> Path: ...
    def item(self) -> SceneItem: ...

class ObjectDelete(SceneChanged):
    class SubOpType:
        __members__: ClassVar[dict] = ...  # read-only
        ObjectDelete: ClassVar[ObjectDelete.SubOpType] = ...
        ObjectDestroyed: ClassVar[ObjectDelete.SubOpType] = ...
        ObjectPostDelete: ClassVar[ObjectDelete.SubOpType] = ...
        ObjectPreDelete: ClassVar[ObjectDelete.SubOpType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    ObjectDelete: ClassVar[ObjectDelete.SubOpType] = ...
    ObjectDestroyed: ClassVar[ObjectDelete.SubOpType] = ...
    ObjectPostDelete: ClassVar[ObjectDelete.SubOpType] = ...
    ObjectPreDelete: ClassVar[ObjectDelete.SubOpType] = ...
    def __init__(self, arg0: Path) -> None: ...
    def changedPath(self) -> Path: ...
    def path(self) -> Path: ...

class ObjectDestroyed(ObjectDelete):
    def __init__(self, arg0: Path) -> None: ...

class ObjectPathAdd(ObjectPathChange):
    def __init__(self, arg0: SceneItem) -> None: ...
    def changedPath(self) -> Path: ...
    def item(self) -> SceneItem: ...

class ObjectPathChange(SceneChanged):
    class SubOpType:
        __members__: ClassVar[dict] = ...  # read-only
        ObjectPathAdd: ClassVar[ObjectPathChange.SubOpType] = ...
        ObjectPathChange: ClassVar[ObjectPathChange.SubOpType] = ...
        ObjectPathRemove: ClassVar[ObjectPathChange.SubOpType] = ...
        ObjectRename: ClassVar[ObjectPathChange.SubOpType] = ...
        ObjectReparent: ClassVar[ObjectPathChange.SubOpType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    ObjectPathAdd: ClassVar[ObjectPathChange.SubOpType] = ...
    ObjectPathChange: ClassVar[ObjectPathChange.SubOpType] = ...
    ObjectPathRemove: ClassVar[ObjectPathChange.SubOpType] = ...
    ObjectRename: ClassVar[ObjectPathChange.SubOpType] = ...
    ObjectReparent: ClassVar[ObjectPathChange.SubOpType] = ...
    def __init__(self) -> None: ...

class ObjectPathRemove(ObjectPathChange):
    def __init__(self, arg0: Path) -> None: ...
    def changedPath(self) -> Path: ...
    def removedPath(self) -> Path: ...

class ObjectPostDelete(ObjectDelete):
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class ObjectPreDelete(ObjectDelete):
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class ObjectRename(ObjectPathChange):
    def __init__(self, arg0: SceneItem, arg1: Path) -> None: ...
    def changedPath(self) -> Path: ...
    def item(self) -> SceneItem: ...
    def previousPath(self) -> Path: ...

class ObjectReparent(ObjectPathChange):
    def __init__(self, arg0: SceneItem, arg1: Path) -> None: ...
    def changedPath(self) -> Path: ...
    def item(self) -> SceneItem: ...
    def previousPath(self) -> Path: ...

class ObservableSelection(Selection, Subject):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ObservableSelection) -> None: ...
    def append(self, arg0: SceneItem) -> bool: ...
    def clear(self) -> None: ...
    def insert(self, arg0: SceneItem, arg1: SceneItem) -> bool: ...
    def remove(self, arg0: SceneItem) -> bool: ...
    def replaceWith(self, arg0: Selection) -> None: ...

class Observer:
    def __init__(self) -> None: ...
    def __call__(self, arg0) -> None: ...

class Path:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Path) -> None: ...
    @overload
    def __init__(self, arg0: List[PathSegment]) -> None: ...
    @overload
    def __init__(self, arg0: PathSegment) -> None: ...
    def back(self) -> PathComponent: ...
    def head(self, arg0: int) -> Path: ...
    def nbSegments(self) -> int: ...
    def pop(self) -> Path: ...
    def popHead(self) -> Path: ...
    def popSegment(self) -> Path: ...
    def reparent(self, arg0: Path, arg1: Path) -> Path: ...
    def replaceComponent(self, arg0: int, arg1: PathComponent) -> Path: ...
    def runTimeId(self) -> int: ...
    def sibling(self, arg0: PathComponent) -> Path: ...
    def startsWith(self, arg0: Path) -> bool: ...
    @overload
    def __add__(self, arg0: str) -> Path: ...
    @overload
    def __add__(self, arg0: PathComponent) -> Path: ...
    @overload
    def __add__(self, arg0: PathSegment) -> Path: ...
    def __eq__(self, arg0: Path) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: Path) -> bool: ...
    @property
    def segments(self) -> List[PathSegment]: ...

class PathComponent:
    @overload
    def __init__(self, arg0: PathComponent) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @classmethod
    def exists(cls, arg0: str) -> bool: ...
    @classmethod
    def tableSize(cls) -> int: ...
    def __eq__(self, arg0: PathComponent) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: PathComponent) -> bool: ...

class PathMappingHandler:
    def __init__(self) -> None: ...
    def fromHost(self, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def pathMappingHandler(cls, arg0: int) -> PathMappingHandler: ...
    @overload
    @classmethod
    def pathMappingHandler(cls, arg0) -> PathMappingHandler: ...
    def toHost(self, *args, **kwargs) -> Any: ...

class PathSegment:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, arg0: PathSegment) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: int, arg2: str) -> None: ...
    @overload
    def __init__(self, arg0: List[PathComponent], arg1: int, arg2: str) -> None: ...
    @overload
    def __init__(self, arg0: PathComponent, arg1: int, arg2: str) -> None: ...
    def components(self) -> List[PathComponent]: ...
    def head(self, arg0: int) -> PathSegment: ...
    def pop(self) -> PathSegment: ...
    def popHead(self) -> PathSegment: ...
    def runTimeId(self) -> int: ...
    def __eq__(self, arg0: PathSegment) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: PathSegment) -> bool: ...
    @property
    def separator(self) -> str: ...

class PathSubject(Subject):
    def __init__(self, arg0: Path, arg1, arg2) -> None: ...

class Rename:
    item: SceneItem
    undoableCommand: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem, arg1) -> None: ...

class RunTimeMgr:
    class Handlers:
        attributesHandler: AttributesHandler
        batchOpsHandler: BatchOpsHandler
        cameraHandler: CameraHandler
        connectionHandler: ConnectionHandler
        contextOpsHandler: ContextOpsHandler
        hierarchyHandler: HierarchyHandler
        lightHandler: LightHandler
        materialHandler: MaterialHandler
        nodeDefHandler: NodeDefHandler
        object3dHandler: Object3dHandler
        pathMappingHandler: PathMappingHandler
        sceneItemOpsHandler: SceneItemOpsHandler
        sceneSegmentHandler: SceneSegmentHandler
        transform3dHandler: Transform3dHandler
        uiInfoHandler: UIInfoHandler
        uiNodeGraphNodeHandler: UINodeGraphNodeHandler
        def __init__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def attributesHandler(self, arg0: int) -> AttributesHandler: ...
    def batchOpsHandler(self, arg0: int) -> BatchOpsHandler: ...
    def cameraHandler(self, arg0: int) -> CameraHandler: ...
    def connectionHandler(self, arg0: int) -> ConnectionHandler: ...
    def contextOpsHandler(self, arg0: int) -> ContextOpsHandler: ...
    def getId(self, arg0: str) -> int: ...
    def getIds(self) -> List[int]: ...
    def getName(self, arg0: int) -> str: ...
    def hasId(self, arg0: int) -> bool: ...
    def hierarchyHandler(self, arg0: int) -> HierarchyHandler: ...
    @classmethod
    def instance(cls) -> RunTimeMgr: ...
    def lightHandler(self, arg0: int) -> LightHandler: ...
    def materialHandler(self, arg0: int) -> MaterialHandler: ...
    def nodeDefHandler(self, arg0: int) -> NodeDefHandler: ...
    def object3dHandler(self, arg0: int) -> Object3dHandler: ...
    def pathMappingHandler(self, arg0: int) -> PathMappingHandler: ...
    def register(self, arg0: str, arg1) -> int: ...
    def sceneItemOpsHandler(self, arg0: int) -> SceneItemOpsHandler: ...
    def sceneSegmentHandler(self, arg0: int) -> SceneSegmentHandler: ...
    def setAttributesHandler(self, arg0: int, arg1: AttributesHandler) -> None: ...
    def setBatchOpsHandler(self, arg0: int, arg1: BatchOpsHandler) -> None: ...
    def setCameraHandler(self, arg0: int, arg1: CameraHandler) -> None: ...
    def setConnectionHandler(self, arg0: int, arg1: ConnectionHandler) -> None: ...
    def setContextOpsHandler(self, arg0: int, arg1: ContextOpsHandler) -> None: ...
    def setHierarchyHandler(self, arg0: int, arg1: HierarchyHandler) -> None: ...
    def setLightHandler(self, arg0: int, arg1: LightHandler) -> None: ...
    def setMaterialHandler(self, arg0: int, arg1: MaterialHandler) -> None: ...
    def setNodeDefHandler(self, arg0: int, arg1: NodeDefHandler) -> None: ...
    def setObject3dHandler(self, arg0: int, arg1: Object3dHandler) -> None: ...
    def setPathMappingHandler(self, arg0: int, arg1: PathMappingHandler) -> None: ...
    def setSceneItemOpsHandler(self, arg0: int, arg1: SceneItemOpsHandler) -> None: ...
    def setSceneSegmentHandler(self, arg0: int, arg1: SceneSegmentHandler) -> None: ...
    def setTransform3dHandler(self, arg0: int, arg1: Transform3dHandler) -> None: ...
    def setUIInfoHandler(self, arg0: int, arg1: UIInfoHandler) -> None: ...
    def setUINodeGraphNodeHandler(self, arg0: int, arg1: UINodeGraphNodeHandler) -> None: ...
    def transform3dHandler(self, arg0: int) -> Transform3dHandler: ...
    def uiInfoHandler(self, arg0: int) -> UIInfoHandler: ...
    def uiNodeGraphNodeHandler(self, arg0: int) -> UINodeGraphNodeHandler: ...
    def unregister(self, arg0: int) -> None: ...

class Scene:
    def __init__(self) -> None: ...
    @classmethod
    def addObserver(cls, arg0: Observer) -> bool: ...
    @classmethod
    def hasObserver(cls, arg0: Observer) -> bool: ...
    @classmethod
    def initializeInstance(cls, arg0: Scene) -> None: ...
    @classmethod
    def instance(cls) -> Scene: ...
    @classmethod
    def nbObservers(cls) -> int: ...
    @classmethod
    def notify(cls, arg0: Notification) -> None: ...
    @classmethod
    def removeObserver(cls, arg0: Observer) -> bool: ...

class SceneChanged(Notification):
    class OpType:
        __members__: ClassVar[dict] = ...  # read-only
        ObjectAdd: ClassVar[SceneChanged.OpType] = ...
        ObjectDelete: ClassVar[SceneChanged.OpType] = ...
        ObjectPathChange: ClassVar[SceneChanged.OpType] = ...
        SceneCompositeNotification: ClassVar[SceneChanged.OpType] = ...
        SubtreeInvalidate: ClassVar[SceneChanged.OpType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    ObjectAdd: ClassVar[SceneChanged.OpType] = ...
    ObjectDelete: ClassVar[SceneChanged.OpType] = ...
    ObjectPathChange: ClassVar[SceneChanged.OpType] = ...
    SceneCompositeNotification: ClassVar[SceneChanged.OpType] = ...
    SubtreeInvalidate: ClassVar[SceneChanged.OpType] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def changedPath(self) -> Path: ...
    def opType(self, *args, **kwargs) -> Any: ...
    def subOpType(self) -> int: ...

class SceneCompositeNotification(SceneChanged):
    class Op:
        item: SceneItem
        opType: SceneChanged.OpType
        path: Path
        specificOpType: int
        def __init__(self, arg0: SceneChanged.OpType, arg1: int, arg2: SceneItem, arg3: Path) -> None: ...
    def __init__(self, arg0: SceneCompositeNotification) -> None: ...
    def appendOp(self, arg0) -> None: ...
    def appendSceneChanged(self, arg0: SceneChanged) -> None: ...
    def changedPath(self) -> Path: ...
    def empty(self) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class SceneItem:
    __hash__: ClassVar[None] = ...
    def __init__(self, arg0: Path) -> None: ...
    def ancestorNodeTypes(self) -> List[str]: ...
    def getRawAddress(self) -> int: ...
    def isProperty(self) -> bool: ...
    def nodeName(self) -> str: ...
    def nodeType(self) -> str: ...
    def path(self) -> Path: ...
    def runTimeId(self) -> int: ...
    def __eq__(self, arg0: SceneItem) -> bool: ...
    def __ne__(self, arg0: SceneItem) -> bool: ...

class SceneItemOps:
    def __init__(self) -> None: ...
    def deleteItem(self) -> bool: ...
    def deleteItemCmd(self, *args, **kwargs) -> Any: ...
    def deleteItemCmdNoExecute(self, *args, **kwargs) -> Any: ...
    def duplicateItem(self) -> SceneItem: ...
    def duplicateItemCmd(self) -> Duplicate: ...
    def duplicateItemCmdNoExecute(self, *args, **kwargs) -> Any: ...
    def renameItem(self, arg0: PathComponent) -> SceneItem: ...
    def renameItemCmd(self, arg0: PathComponent) -> Rename: ...
    def renameItemCmdNoExecute(self, *args, **kwargs) -> Any: ...
    def sceneItem(self) -> SceneItem: ...
    @classmethod
    def sceneItemOps(cls, arg0: SceneItem) -> SceneItemOps: ...

class SceneItemOpsHandler:
    def __init__(self) -> None: ...
    def sceneItemOps(self, arg0: SceneItem) -> SceneItemOps: ...

class SceneItemResultUndoableCommand(UndoableCommand):
    def __init__(self) -> None: ...
    @property
    def sceneItem(self) -> SceneItem: ...

class SceneSegmentHandler:
    def __init__(self) -> None: ...
    @overload
    @classmethod
    def findGatewayItems(cls, arg0: Path) -> Selection: ...
    @overload
    @classmethod
    def findGatewayItems(cls, arg0: Path, arg1: int) -> Selection: ...
    @overload
    def findGatewayItems_(self, arg0: Path) -> Selection: ...
    @overload
    def findGatewayItems_(self, arg0: Path, arg1: int) -> Selection: ...
    @classmethod
    def isGateway(cls, arg0: Path) -> bool: ...
    def isGateway_(self, arg0: Path) -> bool: ...
    @classmethod
    def sceneSegmentHandler(cls, arg0: int) -> SceneSegmentHandler: ...

class Selection:
    def __init__(self) -> None: ...
    def append(self, arg0: SceneItem) -> bool: ...
    def back(self) -> SceneItem: ...
    def clear(self) -> None: ...
    def closestCommonAncestor(self) -> SceneItem: ...
    def contains(self, arg0: Path) -> bool: ...
    def containsAncestor(self, arg0: Path) -> bool: ...
    def containsAncestorInclusive(self, arg0: Path) -> bool: ...
    def containsDescendant(self, arg0: Path) -> bool: ...
    def containsDescendantInclusive(self, arg0: Path) -> bool: ...
    def empty(self) -> bool: ...
    def front(self) -> SceneItem: ...
    def insert(self, arg0: SceneItem, arg1: SceneItem) -> bool: ...
    def next(self, arg0: SceneItem) -> SceneItem: ...
    def remove(self, arg0: SceneItem) -> bool: ...
    def replaceWith(self, arg0: Selection) -> None: ...
    def __contains__(self, arg0: Path) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class SelectionAppendItem(UndoableCommand):
    def __init__(self, arg0: ObservableSelection, arg1: SceneItem) -> None: ...
    @classmethod
    def createAndExecute(cls, arg0: ObservableSelection, arg1: SceneItem) -> UndoableCommand: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class SelectionChanged(Notification):
    class OpType:
        __members__: ClassVar[dict] = ...  # read-only
        Append: ClassVar[SelectionChanged.OpType] = ...
        Clear: ClassVar[SelectionChanged.OpType] = ...
        Insert: ClassVar[SelectionChanged.OpType] = ...
        Remove: ClassVar[SelectionChanged.OpType] = ...
        ReplaceWith: ClassVar[SelectionChanged.OpType] = ...
        SelectionCompositeNotification: ClassVar[SelectionChanged.OpType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    Append: ClassVar[SelectionChanged.OpType] = ...
    Clear: ClassVar[SelectionChanged.OpType] = ...
    Insert: ClassVar[SelectionChanged.OpType] = ...
    Remove: ClassVar[SelectionChanged.OpType] = ...
    ReplaceWith: ClassVar[SelectionChanged.OpType] = ...
    SelectionCompositeNotification: ClassVar[SelectionChanged.OpType] = ...
    @overload
    def __init__(self, arg0: SelectionChanged) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...

class SelectionClear(UndoableCommand):
    def __init__(self, arg0: ObservableSelection) -> None: ...
    @classmethod
    def createAndExecute(cls, arg0: ObservableSelection) -> UndoableCommand: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class SelectionCleared(SelectionChanged):
    @overload
    def __init__(self, arg0: SelectionCleared) -> None: ...
    @overload
    def __init__(self) -> None: ...

class SelectionCompositeNotification(SelectionChanged):
    class Op:
        item: SceneItem
        opType: SelectionChanged.OpType
        position: SceneItem
        @overload
        def __init__(self, arg0: SelectionChanged.OpType) -> None: ...
        @overload
        def __init__(self, arg0: SelectionChanged.OpType, arg1: SceneItem) -> None: ...
        @overload
        def __init__(self, arg0: SelectionChanged.OpType, arg1: SceneItem, arg2: SceneItem) -> None: ...
    def __init__(self, arg0: SelectionCompositeNotification) -> None: ...
    def appendAppendOp(self, arg0: SceneItem) -> None: ...
    def appendClearOp(self) -> None: ...
    def appendInsertOp(self, arg0: SceneItem, arg1: SceneItem) -> None: ...
    def appendRemoveOp(self, arg0: SceneItem) -> None: ...
    def appendReplaceWithOp(self) -> None: ...
    def empty(self) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class SelectionItemAppended(SelectionChanged):
    @overload
    def __init__(self, arg0: SelectionItemAppended) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class SelectionItemInserted(SelectionChanged):
    @overload
    def __init__(self, arg0: SelectionItemInserted) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem, arg1: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...
    def position(self) -> SceneItem: ...

class SelectionItemRemoved(SelectionChanged):
    @overload
    def __init__(self, arg0: SelectionItemRemoved) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class SelectionRemoveItem(UndoableCommand):
    def __init__(self, arg0: ObservableSelection, arg1: SceneItem) -> None: ...
    @classmethod
    def createAndExecute(cls, arg0: ObservableSelection, arg1: SceneItem) -> UndoableCommand: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class SelectionReplaceWith(UndoableCommand):
    def __init__(self, arg0: ObservableSelection, arg1: Selection) -> None: ...
    @classmethod
    def createAndExecute(cls, arg0: ObservableSelection, arg1: Selection) -> UndoableCommand: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class SelectionReplaced(SelectionChanged):
    @overload
    def __init__(self, arg0: SelectionReplaced) -> None: ...
    @overload
    def __init__(self) -> None: ...

class SelectionUndoableCommand(UndoableCommand):
    def __init__(self) -> None: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def targetItem(self, arg0: Path) -> SceneItem: ...
    def undo(self) -> None: ...

class SetBoolUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: bool) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetColor3fUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Color3f) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetColor4fUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Color4f) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetDouble3UndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float, arg1: float, arg2: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetDoubleUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetFloat2UndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float, arg1: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetFloat3UndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float, arg1: float, arg2: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetFloat4UndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetFloatUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: float) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetIntUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: int) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetLight_ConePropsUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Light_ConeProps) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetLight_SpherePropsUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Light_SphereProps) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetMatrix3dUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Matrix3d) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SetMatrix4dUndoableCommand(UndoableCommand):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    def sceneItem(self) -> SceneItem: ...
    def set(self, arg0: Matrix4d) -> bool: ...
    def setPath(self, arg0: Path) -> None: ...

class SphereInterface:
    def __init__(self, *args, **kwargs) -> None: ...
    def sphereProps(self, arg0: float, arg1: bool) -> None: ...
    def spherePropsCmd(self, *args, **kwargs) -> Any: ...

class Subject:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Subject) -> None: ...
    def addObserver(self, arg0) -> bool: ...
    def hasObserver(self, arg0) -> bool: ...
    def nbObservers(self) -> int: ...
    def notify(self, arg0) -> None: ...
    def removeObserver(self, arg0) -> bool: ...

class SubtreeInvalidate(SceneChanged):
    def __init__(self, arg0: SceneItem) -> None: ...
    def changedPath(self) -> Path: ...
    def root(self) -> SceneItem: ...

class Transform3d:
    def __init__(self) -> None: ...
    @classmethod
    def addObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @classmethod
    def editTransform3d(cls, arg0: SceneItem, arg1: EditTransform3dHint) -> Transform3d: ...
    def exclusiveMatrix(self) -> Matrix4d: ...
    @classmethod
    def hasObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: Path) -> bool: ...
    @overload
    @classmethod
    def hasObservers(cls, arg0: int) -> bool: ...
    def inclusiveMatrix(self) -> Matrix4d: ...
    def matrix(self) -> Matrix4d: ...
    @classmethod
    def nbObservers(cls, arg0: SceneItem) -> int: ...
    @classmethod
    def notify(cls, arg0: Path) -> None: ...
    def path(self) -> Path: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0: SceneItem, arg1: Observer) -> bool: ...
    @overload
    @classmethod
    def removeObserver(cls, arg0: Path, arg1: Observer) -> bool: ...
    def rotate(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def rotateAxis(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def rotateAxis(self) -> Vector3d: ...
    def rotateAxisCmd(self, *args, **kwargs) -> Any: ...
    def rotateCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def rotatePivot(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def rotatePivot(self) -> Vector3d: ...
    def rotatePivotCmd(self, *args, **kwargs) -> Any: ...
    def rotatePivotTranslation(self) -> Vector3d: ...
    def rotation(self) -> Vector3d: ...
    @overload
    def scale(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def scale(self) -> Vector3d: ...
    def scaleCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def scalePivot(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def scalePivot(self) -> Vector3d: ...
    def scalePivotCmd(self, *args, **kwargs) -> Any: ...
    def scalePivotTranslation(self) -> Vector3d: ...
    def sceneItem(self) -> SceneItem: ...
    def segmentExclusiveMatrix(self) -> Matrix4d: ...
    def segmentInclusiveMatrix(self) -> Matrix4d: ...
    def setMatrix(self, arg0: Matrix4d) -> None: ...
    def setMatrixCmd(self, *args, **kwargs) -> Any: ...
    @overload
    def shear(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def shear(self) -> Vector3d: ...
    def shearCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def transform3d(cls, arg0: SceneItem) -> Transform3d: ...
    def translate(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def translateCmd(self, *args, **kwargs) -> Any: ...
    def translateRotatePivot(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def translateRotatePivotCmd(self, *args, **kwargs) -> Any: ...
    def translateScalePivot(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def translateScalePivotCmd(self, *args, **kwargs) -> Any: ...
    def translation(self) -> Vector3d: ...

class Transform3dChanged(Notification):
    @overload
    def __init__(self, arg0: Transform3dChanged) -> None: ...
    @overload
    def __init__(self, arg0: SceneItem) -> None: ...
    def item(self) -> SceneItem: ...

class Transform3dHandler:
    def __init__(self) -> None: ...
    def editTransform3d(self, arg0: SceneItem, arg1: EditTransform3dHint) -> Transform3d: ...
    def transform3d(self, arg0: SceneItem) -> Transform3d: ...

class Transform3dPathSubject(PathSubject):
    def __init__(self, arg0: Path) -> None: ...

class UIInfoHandler:
    class Icon:
        badgeIcon: str
        baseIcon: str
        mode: UIInfoHandler.Mode
        pos: UIInfoHandler.Quadrant
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, arg0: str) -> None: ...
        @overload
        def __init__(self, arg0: str, arg1: UIInfoHandler.Mode) -> None: ...
        @overload
        def __init__(self, arg0: str, arg1: str, arg2: UIInfoHandler.Quadrant) -> None: ...

    class Mode:
        __members__: ClassVar[dict] = ...  # read-only
        Active: ClassVar[UIInfoHandler.Mode] = ...
        Disabled: ClassVar[UIInfoHandler.Mode] = ...
        Normal: ClassVar[UIInfoHandler.Mode] = ...
        Selected: ClassVar[UIInfoHandler.Mode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class Quadrant:
        __members__: ClassVar[dict] = ...  # read-only
        LowerLeft: ClassVar[UIInfoHandler.Quadrant] = ...
        LowerRight: ClassVar[UIInfoHandler.Quadrant] = ...
        None: ClassVar[UIInfoHandler.Quadrant] = ...
        UpperLeft: ClassVar[UIInfoHandler.Quadrant] = ...
        UpperRight: ClassVar[UIInfoHandler.Quadrant] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    Active: ClassVar[UIInfoHandler.Mode] = ...
    Disabled: ClassVar[UIInfoHandler.Mode] = ...
    LowerLeft: ClassVar[UIInfoHandler.Quadrant] = ...
    LowerRight: ClassVar[UIInfoHandler.Quadrant] = ...
    None: ClassVar[UIInfoHandler.Quadrant] = ...
    Normal: ClassVar[UIInfoHandler.Mode] = ...
    Selected: ClassVar[UIInfoHandler.Mode] = ...
    UpperLeft: ClassVar[UIInfoHandler.Quadrant] = ...
    UpperRight: ClassVar[UIInfoHandler.Quadrant] = ...
    def __init__(self) -> None: ...
    def getLongRunTimeLabel(self) -> str: ...
    def treeViewCellInfo(self, arg0, arg1: CellInfo) -> bool: ...
    def treeViewIcon(self, *args, **kwargs) -> Any: ...
    def treeViewTooltip(self, arg0) -> str: ...
    @classmethod
    def uiInfoHandler(cls, arg0: int) -> UIInfoHandler: ...

class UINodeGraphNode:
    def __init__(self) -> None: ...
    def getPosition(self, *args, **kwargs) -> Any: ...
    def hasPosition(self) -> bool: ...
    def sceneItem(self) -> SceneItem: ...
    def setPosition(self, arg0: float, arg1: float) -> None: ...
    def setPositionCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def uiNodeGraphNode(cls, arg0: SceneItem) -> UINodeGraphNode: ...

class UINodeGraphNodeHandler:
    def __init__(self) -> None: ...
    def uiNodeGraphNode(self, arg0: SceneItem) -> UINodeGraphNode: ...

class UINodeGraphNode_v4_1:
    def __init__(self) -> None: ...
    def getSize(self, *args, **kwargs) -> Any: ...
    def hasSize(self) -> bool: ...
    def setSize(self, arg0: float, arg1: float) -> None: ...
    def setSizeCmd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def uiNodeGraphNode(cls, arg0: SceneItem) -> UINodeGraphNode_v4_1: ...

class UndoableCommand:
    def __init__(self) -> None: ...
    def execute(self) -> None: ...
    def redo(self) -> None: ...
    def undo(self) -> None: ...

class UndoableCommandGuard:
    def __init__(self, arg0: str) -> None: ...
    def setSuccess(self) -> None: ...
    def __enter__(self) -> object: ...
    def __exit__(self, arg0: handle, arg1: handle, arg2: handle) -> None: ...

class UndoableCommandMgr:
    def __init__(self) -> None: ...
    def executeCmd(self, arg0: UndoableCommand) -> None: ...
    @classmethod
    def initializeInstance(cls, arg0: UndoableCommandMgr) -> None: ...
    @classmethod
    def instance(cls) -> UndoableCommandMgr: ...

class Value:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: Value) -> None: ...
    def empty(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, arg0: Value) -> bool: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: Value) -> bool: ...

class ValueDictionary:
    def __init__(self) -> None: ...
    def items(self) -> Iterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg0: str) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: str, arg1) -> None: ...

class Vector2d:
    __hash__: ClassVar[None] = ...
    vector: List[float[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[2]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    def set(self, arg0: float, arg1: float) -> None: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def __eq__(self, arg0: Vector2d) -> bool: ...
    def __ne__(self, arg0: Vector2d) -> bool: ...

class Vector2f:
    __hash__: ClassVar[None] = ...
    vector: List[float[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[2]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    def set(self, arg0: float, arg1: float) -> None: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def __eq__(self, arg0: Vector2f) -> bool: ...
    def __ne__(self, arg0: Vector2f) -> bool: ...

class Vector2i:
    __hash__: ClassVar[None] = ...
    vector: List[int[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[int[2]]) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def set(self, arg0: int, arg1: int) -> None: ...
    def x(self) -> int: ...
    def y(self) -> int: ...
    def __eq__(self, arg0: Vector2i) -> bool: ...
    def __ne__(self, arg0: Vector2i) -> bool: ...

class Vector3d:
    __hash__: ClassVar[None] = ...
    vector: List[float[3]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[3]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def set(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __eq__(self, arg0: Vector3d) -> bool: ...
    def __ne__(self, arg0: Vector3d) -> bool: ...

class Vector3f:
    __hash__: ClassVar[None] = ...
    vector: List[float[3]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[3]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def set(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __eq__(self, arg0: Vector3f) -> bool: ...
    def __ne__(self, arg0: Vector3f) -> bool: ...

class Vector3i:
    __hash__: ClassVar[None] = ...
    vector: List[int[3]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[int[3]]) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def set(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def x(self) -> int: ...
    def y(self) -> int: ...
    def z(self) -> int: ...
    def __eq__(self, arg0: Vector3i) -> bool: ...
    def __ne__(self, arg0: Vector3i) -> bool: ...

class Vector4d:
    __hash__: ClassVar[None] = ...
    vector: List[float[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[4]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def w(self) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __eq__(self, arg0: Vector4d) -> bool: ...
    def __ne__(self, arg0: Vector4d) -> bool: ...

class Vector4f:
    __hash__: ClassVar[None] = ...
    vector: List[float[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[float[4]]) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def w(self) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __eq__(self, arg0: Vector4f) -> bool: ...
    def __ne__(self, arg0: Vector4f) -> bool: ...

class Vector4i:
    __hash__: ClassVar[None] = ...
    vector: List[int[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[int[4]]) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def w(self) -> int: ...
    def x(self) -> int: ...
    def y(self) -> int: ...
    def z(self) -> int: ...
    def __eq__(self, arg0: Vector4i) -> bool: ...
    def __ne__(self, arg0: Vector4i) -> bool: ...

class VersionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def getBuildDate(cls) -> str: ...
    @classmethod
    def getBuildNumber(cls) -> int: ...
    @classmethod
    def getGitBranch(cls) -> str: ...
    @classmethod
    def getGitCommit(cls) -> str: ...
    @classmethod
    def getMajorVersion(cls) -> int: ...
    @classmethod
    def getMinorVersion(cls) -> int: ...
    @classmethod
    def getPatchLevel(cls) -> int: ...

class VisibilityChanged(Notification):
    def __init__(self, arg0: Path) -> None: ...
    def path(self) -> Path: ...

def getAttributeBool(arg0: Attributes, arg1: str) -> AttributeBool: ...
def getAttributeColorFloat3(arg0: Attributes, arg1: str) -> AttributeColorFloat3: ...
def getAttributeColorFloat4(arg0: Attributes, arg1: str) -> AttributeColorFloat4: ...
def getAttributeDouble(arg0: Attributes, arg1: str) -> AttributeDouble: ...
def getAttributeDouble3(arg0: Attributes, arg1: str) -> AttributeDouble3: ...
def getAttributeEnumString(arg0: Attributes, arg1: str) -> AttributeEnumString: ...
def getAttributeFilename(arg0: Attributes, arg1: str) -> AttributeFilename: ...
def getAttributeFloat(arg0: Attributes, arg1: str) -> AttributeFloat: ...
def getAttributeFloat2(arg0: Attributes, arg1: str) -> AttributeFloat2: ...
def getAttributeFloat3(arg0: Attributes, arg1: str) -> AttributeFloat3: ...
def getAttributeFloat4(arg0: Attributes, arg1: str) -> AttributeFloat4: ...
def getAttributeGeneric(arg0: Attributes, arg1: str) -> AttributeGeneric: ...
def getAttributeInt(arg0: Attributes, arg1: str) -> AttributeInt: ...
def getAttributeInt3(arg0: Attributes, arg1: str) -> AttributeInt3: ...
def getAttributeMatrix3d(arg0: Attributes, arg1: str) -> AttributeMatrix3d: ...
def getAttributeMatrix4d(arg0: Attributes, arg1: str) -> AttributeMatrix4d: ...
def getAttributeString(arg0: Attributes, arg1: str) -> AttributeString: ...
def getAttributesFromRaw(arg0: int) -> Attributes: ...
def getSceneItemFromRaw(arg0: int) -> SceneItem: ...
